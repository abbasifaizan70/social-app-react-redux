{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello! First Post'\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text! 2nd Post'\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // reducer to add new created post\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        };\n      }\n\n    },\n\n    // other reducers here\n    // reducer to update existing post for that we need action, payload and state also\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/home/dev/React Projects/Social Media App/src/features/posts/postsSlice.js"],"names":["createSlice","initialState","id","title","content","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","nanoid","postUpdated","existingPost","find","post","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE;AAA1C,CADmB,EAEnB;AAAEF,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE;AAA1C,CAFmB,CAArB;AAKA,MAAMC,UAAU,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,OADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAC;AACP;AACAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHQ;;AAITC,MAAAA,OAAO,CAACX,KAAD,EAAQC,OAAR,EAAiB;AACtB,eAAO;AACLS,UAAAA,OAAO,EAAE;AACPX,YAAAA,EAAE,EAAEa,MAAM,EADH;AAEPZ,YAAAA,KAFO;AAGPC,YAAAA;AAHO;AADJ,SAAP;AAOD;;AAZQ,KAFJ;;AAgBP;AACA;AACAY,IAAAA,WAAW,CAAEN,KAAF,EAASC,MAAT,EAAgB;AACzB,YAAM;AAACT,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAuBO,MAAM,CAACE,OAApC;AACA,YAAMI,YAAY,GAAGP,KAAK,CAACQ,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYA,EAA/B,CAArB;;AACA,UAAIe,YAAJ,EAAiB;AACfA,QAAAA,YAAY,CAACd,KAAb,GAAqBA,KAArB;AACAc,QAAAA,YAAY,CAACb,OAAb,GAAuBA,OAAvB;AACD;AACF;;AAzBM;AAHoB,CAAD,CAA9B;AAiCA,OAAO,MAAM;AAAEI,EAAAA,SAAF;AAAaQ,EAAAA;AAAb,IAA6BX,UAAU,CAACe,OAA9C;AACP,eAAef,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [\n  { id: '1', title: 'First Post!', content: 'Hello! First Post' },\n  { id: '2', title: 'Second Post', content: 'More text! 2nd Post' }\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers:{\n    // reducer to add new created post\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload)\n      },\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content\n          }\n        }\n      }\n    },\n    // other reducers here\n    // reducer to update existing post for that we need action, payload and state also\n    postUpdated (state, action){\n      const {id, title, content} = action.payload\n      const existingPost = state.find(post => post.id === id)\n      if (existingPost){\n        existingPost.title = title\n        existingPost.content = content\n      }\n    }\n    \n  }\n})\n\nexport const { postAdded, postUpdated } = postsSlice.actions\nexport default postsSlice.reducer;"]},"metadata":{},"sourceType":"module"}