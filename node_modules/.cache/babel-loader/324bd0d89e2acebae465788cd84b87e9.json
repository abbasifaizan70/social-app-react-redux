{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { sub } from 'date-fns';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!',\n  user: '0',\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    hooray: 0,\n    heart: 0,\n    rocket: 0,\n    eyes: 0\n  }\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text',\n  user: '2',\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    hooray: 0,\n    heart: 0,\n    rocket: 0,\n    eyes: 0\n  }\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            date: new Date().toISOString(),\n            title,\n            content,\n            user: userId,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              heart: 0,\n              rocket: 0,\n              eyes: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/Users/dev/Downloads/Soical-App-Using-React-master/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","sub","initialState","id","title","content","user","date","Date","minutes","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","reactionAdded","postId","reaction","existingPost","find","post","postUpdated","actions"],"mappings":"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","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\nimport { sub } from 'date-fns'\n\nconst initialState = [\n  {\n    id: '1',\n    title: 'First Post!',\n    content: 'Hello!',\n    user: '0',\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      hooray: 0,\n      heart: 0,\n      rocket: 0,\n      eyes: 0,\n    },\n  },\n  {\n    id: '2',\n    title: 'Second Post',\n    content: 'More text',\n    user: '2',\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      hooray: 0,\n      heart: 0,\n      rocket: 0,\n      eyes: 0,\n    },\n  },\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            date: new Date().toISOString(),\n            title,\n            content,\n            user: userId,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              heart: 0,\n              rocket: 0,\n              eyes: 0,\n            },\n          },\n        }\n      },\n    },\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.find((post) => post.id === postId)\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.find((post) => post.id === id)\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}