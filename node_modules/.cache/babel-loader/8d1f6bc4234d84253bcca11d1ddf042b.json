{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns';\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello! First Post',\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString()\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text! 2nd Post',\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString()\n}];\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    // reducer to add new created post\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString(),\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              heart: 0,\n              rocket: 0,\n              eyes: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    // other reducers here\n    // reducer to update existing post for that we need action, payload and state also\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.find(post => post.id === id);\n\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id = postId);\n\n      if (existingPost) {\n        existingPost.reaction[reaction]++;\n      }\n    }\n\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/home/dev/React Projects/Social Media App/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","user","reactions","thumbsUp","hooray","heart","rocket","eyes","postUpdated","existingPost","find","post","reactionAdded","postId","reaction","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,GAAT,QAAoB,UAApB;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE,mBAA1C;AAA+DC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAiCC,WAAjC;AAArE,CADmB,EAEnB;AAAEN,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE,qBAA1C;AAAiEC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAgCC,WAAhC;AAAvE,CAFmB,CAArB;AAKA,MAAMC,UAAU,GAAGX,WAAW,CAAC;AAC7BY,EAAAA,IAAI,EAAE,OADuB;AAE7BT,EAAAA,YAF6B;AAG7BU,EAAAA,QAAQ,EAAC;AACP;AACAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHQ;;AAITC,MAAAA,OAAO,CAACf,KAAD,EAAQC,OAAR,EAAiBe,MAAjB,EAAyB;AAC9B,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPf,YAAAA,EAAE,EAAEH,MAAM,EADH;AAEPI,YAAAA,KAFO;AAGPC,YAAAA,OAHO;AAIPgB,YAAAA,IAAI,EAAED,MAJC;AAKPd,YAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWE,WAAX,EALC;AAMPa,YAAAA,SAAS,EAAE;AACTC,cAAAA,QAAQ,EAAE,CADD;AAETC,cAAAA,MAAM,EAAE,CAFC;AAGTC,cAAAA,KAAK,EAAE,CAHE;AAITC,cAAAA,MAAM,EAAE,CAJC;AAKTC,cAAAA,IAAI,EAAE;AALG;AANJ;AADJ,SAAP;AAgBD;;AArBQ,KAFJ;;AA0BP;AACA;AACAC,IAAAA,WAAW,CAAEb,KAAF,EAASC,MAAT,EAAgB;AACzB,YAAM;AAACb,QAAAA,EAAD;AAAKC,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAuBW,MAAM,CAACE,OAApC;AACA,YAAMW,YAAY,GAAGd,KAAK,CAACe,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAAC5B,EAAL,KAAYA,EAA/B,CAArB;;AACA,UAAI0B,YAAJ,EAAiB;AACfA,QAAAA,YAAY,CAACzB,KAAb,GAAqBA,KAArB;AACAyB,QAAAA,YAAY,CAACxB,OAAb,GAAuBA,OAAvB;AACD;AACF,KAnCM;;AAqCP2B,IAAAA,aAAa,CAACjB,KAAD,EAAQC,MAAR,EAAe;AAC1B,YAAM;AAACiB,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAqBlB,MAAM,CAACE,OAAlC;AACA,YAAMW,YAAY,GAAGd,KAAK,CAACe,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAAC5B,EAAL,GAAU8B,MAA7B,CAArB;;AACA,UAAIJ,YAAJ,EAAiB;AACfA,QAAAA,YAAY,CAACK,QAAb,CAAsBA,QAAtB;AACD;AACF;;AA3CM;AAHoB,CAAD,CAA9B;AAmDA,OAAO,MAAM;AAAErB,EAAAA,SAAF;AAAae,EAAAA,WAAb;AAA0BI,EAAAA;AAA1B,IAA4CtB,UAAU,CAACyB,OAA7D;AACP,eAAezB,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from 'date-fns'\n\nconst initialState = [\n  { id: '1', title: 'First Post!', content: 'Hello! First Post', date: sub(new Date(), { minutes: 10 }).toISOString() },\n  { id: '2', title: 'Second Post', content: 'More text! 2nd Post', date: sub(new Date(), { minutes: 5 }).toISOString() }\n]\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers:{\n    // reducer to add new created post\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload)\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            user: userId,\n            date: new Date().toISOString(),\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              heart: 0,\n              rocket: 0,\n              eyes: 0,\n            },\n          }\n        }\n      }\n    },\n\n    // other reducers here\n    // reducer to update existing post for that we need action, payload and state also\n    postUpdated (state, action){\n      const {id, title, content} = action.payload\n      const existingPost = state.find(post => post.id === id)\n      if (existingPost){\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n\n    reactionAdded(state, action){\n      const {postId, reaction} = action.payload\n      const existingPost = state.find(post => post.id = postId)\n      if (existingPost){\n        existingPost.reaction[reaction]++\n      }\n    }\n    \n  }\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\nexport default postsSlice.reducer;"]},"metadata":{},"sourceType":"module"}